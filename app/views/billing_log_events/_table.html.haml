= render "log_events/filter_form",
  event_type_options: billing_log_events_options,
  exclude_query_field: true

= will_paginate(@billing_log_events)

%table.table.table-striped.table-hover.billing-logs
  %thead
    %tr
      %th= LogEvent.human_attribute_name(:event_time)
      %th= LogEvent.human_attribute_name(:event)
      %th.billing-logs__object= LogEvent.human_attribute_name(:object)
      %th= LogEvent.human_attribute_name(:notification)

  %tbody
    - decorated_log_events(@billing_log_events).each do |log_event|
      %tr
        %td= I18n.l(log_event.event_time, format: :usa)
        %td= text(log_event.locale_tag)
        %td.billing-logs__object
          = object_tag(log_event.object, class: "billing-logs__object")
          - if log_event.event_type == "review_orders_email" && log_event.has_orders?
            %br
            %small.text-muted
              Orders: #{log_event.order_ids_display}
          - if log_event.has_reconciliation_data?
            - notes = log_event.all_reconciliation_notes
            %br
            %small.text-muted= notes.first
            - if notes.size > 1
              - collapse_id = "log-event-notes-#{log_event.id}"
              %div.collapse{ id: collapse_id }
                - notes[1..-1].each do |note|
                  %br
                  %small.text-muted= note
              %a{ href: "##{collapse_id}", data: { toggle: "collapse" }, aria: { expanded: false, controls: collapse_id } }
                %small.text-muted
                  = "(+#{notes.size - 1} more)"
        %td.billing-logs__email-notification
          - if log_event.email_notification?
            %span= log_event.email_subject
            %small= log_event.email_to
          - else
            â€“

= will_paginate(@billing_log_events)
