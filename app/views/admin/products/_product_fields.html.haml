= render "admin/products/meta_fields", f: f

- unless f.object.is_a?(Bundle)
  = render "admin/products/account_fields", f: f

  = f.input :initial_order_status_id, collection: OrderStatus.initial_statuses(current_facility).collect {|cf| [cf.name_with_level, cf.id] }, hint: text("hints.initial_order_status"), include_blank: false

  - if @product.id.blank? && current_user.administrator?
    = f.input :billing_mode, collection: Product.billing_modes, include_blank: false, hint: text("hints.billing_mode")

  %fieldset.well
    = f.input :requires_approval, as: :boolean, label: false, inline_label: text("hints.requires_approval"), input_html: { data: { disables: ".#{f.object.class.model_name.to_s.underscore}_allows_training_requests, .instrument_restrict_holiday_access"} }
    - if SettingsHelper.feature_on?(:training_requests)
      = f.input :allows_training_requests, as: :boolean, label: false, inline_label: text("hints.allows_training_requests")
    - if f.object.is_a?(Instrument)
      = f.input :restrict_holiday_access, as: :boolean, label: false, inline_label: text("hints.restrict_holiday_access")

= f.input :cross_core_ordering_available, as: :boolean, label: false, inline_label: text("hints.cross_core_ordering_available")
= f.input :is_archived, as: :boolean, label: false, inline_label: text("hints.is_archived")
= f.input :is_hidden, as: :boolean, label: false, inline_label: text("hints.is_hidden", field: f.object.class.model_name.human.downcase)
- unless f.object.is_a?(Bundle)
  = f.input :user_notes_field_mode, collection: Products::UserNoteMode.all, include_blank: false
  = f.input :user_notes_label
= f.input :email_purchasers_on_order_status_changes, label: false, inline_label: true
