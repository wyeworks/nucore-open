- show_reconcile_notes = local_assigns[:show_reconcile_notes]
- if @statements.empty?
  %p.notice= text("no_statements")
- else
  %table.table.table-striped.table-hover
    %thead
      %tr
        %th= Statement.human_attribute_name(:invoice_number)
        %th= Statement.human_attribute_name(:created_at)
        %th= Statement.human_attribute_name(:account_admins)
        - unless @account
          %th= Account.model_name.human
        - if current_facility&.cross_facility?
          %th= Facility.model_name.human
        %th.currency # of #{Order.model_name.human.pluralize}
        %th.currency= Statement.human_attribute_name(:total_cost)
        %th= t("statements.closed_at")
        %th= t("statements.closed_by")
        %th= Statement.human_attribute_name(:status)
    %tbody
      - StatementPresenter.wrap(@statements).each do |s|
        %tr.statement
          %td.centered
            = "##{s.invoice_number}"
            - unless s.canceled_at
              %br
              - # TODO: Refactor Statement#order_details to go through statement_rows so we can generate PDFs for canceled statements
              - path = current_facility ? statement_path(s) : account_statement_path(s.account, s, format: :pdf)
              = link_to t("statements.pdf.download"), path
              - if current_facility
                - if SettingsHelper.feature_on?(:send_statement_emails)
                  %br
                  - confirm = "You are about to re-send this invoice to the following recipients: #{s.users_to_notify.join(", ")}"
                  = link_to(t("statements.resend"),
                    resend_emails_facility_statement_path(current_facility, s),
                    method: :post,
                    class: "js--resend",
                    data: { confirm: confirm })

                - if s.can_cancel? && show_cancel_button
                  = button_to(t("statements.cancel"),
                    cancel_facility_statement_path(current_facility, s),
                    class: "btn btn-danger",
                    data: { confirm: "Are you sure you want to cancel?" })
          %td= format_usa_datetime(s.created_at)
          %td
            - s.account.notify_users.each do |user|
              = mail_to user.email, user.full_name
          - unless @account
            %td= link_to s.account, facility_account_path(current_facility, s.account)
          - if current_facility&.cross_facility?
            %td= s.facility.name
          %td.currency= s.order_details.count
          %td.currency= number_to_currency(s.total_cost)
          %td
            %ul.unstyled
              - s.closed_by_times.each do |closed_by_time|
                %li.statement__nowrap-text= closed_by_time
          %td
            %ul.unstyled
              - s.closed_by_user_full_names.each do |closed_by_name|
                %li.statement__nowrap-text= closed_by_name
          %td
            %div
              %span= Statement.human_attribute_name("status.#{s.status}")
            - if show_reconcile_notes && s.reconcile_notes.present?
              %div
                %small
                  %strong= "#{t('statements.notes')}:"
              %div
                %small= s.reconcile_notes.shift
              %ul.unstyled.collapse{ id: "statement-notes-#{s.id}" }
                - s.reconcile_notes.each do |note|
                  %li
                    %small= note
              - if s.reconcile_notes.length > 0
                %a{ role: "button", href: "#statement-notes-#{s.id}", data: { toggle: "collapse", target: "#statement-notes-#{s.id}" } }
                  %small= t("statements.expand")


  = will_paginate(@statements)
