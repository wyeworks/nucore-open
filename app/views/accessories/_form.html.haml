= simple_form_for :accessories, url: url_for(action: :create), remote: request.xhr?, html: { "data-type" => "html", :id => "accessory-form", class: :pick_accessories_form } do |f|
  .modal-body
    = render partial: "shared/flashes" if modal?
    %p= t("product_accessories.pick_accessories.instruct")
    - if @order_detail.reservation.ongoing?
      %p= t("product_accessories.pick_accessories.actual_time_ongoing_html", time: @order_detail.reservation.actual_duration_mins)
    - else
      %p= t("product_accessories.pick_accessories.actual_time_html", time: @order_detail.reservation.actual_duration_mins)

    %table.table
      - @order_details.each do |od|
        = f.simple_fields_for od.product.id.to_s, od do |p|
          %tr{class: ["accessory-row", "scaling-#{od.class.name.demodulize.underscore}"]}
            %td
              = p.input :enabled, as: :boolean, label: false, inline_label:  "#{od.product.to_s} (#{t("product_accessories.type.#{od.scaling_type}")})", checked_value: "true", unchecked_value: "false"

            %td= p.input :quantity,
                disabled: !od.quantity_editable?,
                label: false,
                input_html: { value: od.quantity,
                              class: od.quantity_as_time? ? "timeinput" : "",
                              data: { always_disabled: !od.quantity_editable? } }

  .modal-footer
    = f.submit t("product_accessories.button.submit"), class: "btn btn-primary"
    = modal_cancel_button text: t("product_accessories.button.cancel")
