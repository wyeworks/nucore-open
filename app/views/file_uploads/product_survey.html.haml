= content_for :h1 do
  =h current_facility
= content_for :sidebar do
  = render :partial => 'admin/shared/sidenav_product', :locals => { :sidenav_tab => @product.class.name.downcase + 's' }
= content_for :tabnav do
  = render :partial => 'admin/shared/tabnav_product', :locals => {:secondary_tab => 'surveys'}

%h2=h @product
%p= t('.intro')
.box_no_fill.margin_bottom
  %h3= t('.order_form.head')
  %p= t('.order_form.main')
  = form_for(@survey, :url => create_product_survey_path(current_facility, @product.parameterize, @product), :html => { :multipart => true }) do |f|
    = f.error_messages
    %ul.form
      %li
        = f.label :location, 'Service URL', :class => 'required'
        = f.text_field :location, :size => 60
    %ul.inline
      %li
        = f.submit('Add', :disable_with => "Adding...", :class => 'btn')
  %br
  - surveys = @product.external_service_passers
  - if surveys.empty?
    %p.notice= t('.order_form.notice')
  - else
    %table.table.table-striped.table-hover
      %thead
        %tr
          %th
          %th.centered Status
          %th Service URL
          %th Date Added
      %tbody
        - surveys.each do |esp|
          %tr
            - if esp.active?
              %td.centered= link_to 'Deactivate', deactivate_survey_path(current_facility, @product, esp), :method => :put
              %td.centered Active
            - else
              %td.centered= link_to 'Activate', activate_survey_path(current_facility, @product, esp), :method => :put
              %td.centered Inactive
            %td= link_to truncate(esp.external_service.location, :length => 60), esp.external_service.location, :target => '_blank'
            %td= human_datetime(esp.created_at)

.box_no_fill
  %h3= t('.download_form.head')
  %p= t('.download_form.main')
  = form_for(@file, :url => create_product_survey_path(current_facility, @product.parameterize, @product), :html => { :multipart => true, :method => :post }) do |f|
    = f.error_messages
    = f.hidden_field :file_type
    %ul.form
      %li
        = f.label :file, 'File', :class => 'required'
        = f.file_field :file
    %ul.inline
      %li= f.submit('Upload', :disable_with => "Uploading...", :class => 'btn')
  %br
  - files = @product.stored_files.template
  - if files.empty?
    %p.notice= t('.download_form.notice')
  - else
    %table.table.table-striped.table-hover
      %thead
        %tr
          %th
          %th File
          %th Date Uploaded
          %th Uploaded By
      %tbody
        - files.each do |stored_file|
          %tr
            %td.centered= link_to 'Delete', remove_product_file_path(current_facility, @product.parameterize, @product, stored_file), :method => :delete, :confirm => t('.download_form.confirm')
            %td= link_to stored_file.name, stored_file.file.url
            %td= human_datetime(stored_file.created_at)
            %td= User.find(stored_file.created_by).full_name
