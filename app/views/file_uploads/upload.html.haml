= content_for :h1 do
  = current_facility

= content_for :sidebar do
  = render "admin/shared/sidenav_product",
    sidenav_tab: @product.class.name.pluralize.downcase

= content_for :tabnav do
  = render "admin/shared/tabnav_product", secondary_tab: "documentation"

%h2= @product

%p= t(".documentation_note")

- if can? :create, @file
  = simple_form_for(@file, url: add_product_file_path(current_facility, @product.parameterize, @product), html: { multipart: true, method: :post }) do |f|
    = f.error_messages
    = f.hidden_field :file_type

    = f.input :file, required: true
    = f.input :name, hint: t(".filename_hint"), hint_html: { class: "help-inline" }

    %ul.inline
      %li
        = f.submit t(".submit"),
          data: { disable_with: t(".submitted") },
          class: "btn"

%br

- files = @product.stored_files.public_send("#{@file.file_type || params[:file_type]}") # TODO: don't allow arbitrary method calls from user params

- if files.empty?
  %p.notice= t(".no_uploads")

- else
  %table.table.table-striped.table-hover
    %thead
      %tr
        %th
        %th= t(".th.file")
        %th= t(".th.created_at")
        %th= t(".th.created_by")

    %tbody
      - files.each do |stored_file|
        %tr
          %td
            - if can?(:delete, stored_file)
              = link_to t("shared.delete"),
                remove_product_file_path(current_facility, @product.parameterize, @product, stored_file),
                method: :delete,
                confirm: t(".confirm_delete")

          %td= link_to stored_file.name, product_file_path(stored_file)
          %td= human_datetime(stored_file.created_at)
          %td= User.find(stored_file.created_by).full_name
