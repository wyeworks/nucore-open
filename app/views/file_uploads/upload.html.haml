= content_for :h1 do
  =h current_facility

= content_for :sidebar do
  = render :partial => 'admin/shared/sidenav_product', :locals => { :sidenav_tab => @product.class.name.downcase + 's' }

= content_for :tabnav do
  = render :partial => 'admin/shared/tabnav_product', :locals => {:secondary_tab => 'documentation'}

%h2= @product
%p If provided, documentation will be available for download from the product page.
- if can? :create, @file
  = simple_form_for(@file, :url => add_product_file_path(current_facility, @product.parameterize, @product), :html => { :multipart => true, :method => :post }) do |f|
    = f.error_messages
    = f.hidden_field :file_type

    = f.input :file, :required => true
    = f.input :name, :hint => 'Name of the file as displayed on the product page', :hint_html => { :class => 'help-inline' }

    %ul.inline
      %li= f.submit('Upload', :disable_with => "Uploading...", :class => 'btn')
%br
- files = @product.stored_files.send("#{@file.file_type || params[:file_type]}")
- if files.empty?
  %p.notice No documents have been uploaded yet
- else
  %table.table.table-striped.table-hover
    %thead
      %tr
        %th
        %th File
        %th Date Uploaded
        %th Uploaded by
    %tbody
      - files.each do |stored_file|
        %tr
          %td= link_to 'Delete', remove_product_file_path(current_facility, @product.parameterize, @product, stored_file), :method => :delete, :confirm => 'Are you sure you wish to remove this file?' if can? :delete, stored_file
          %td= link_to stored_file.name, stored_file.file.url
          %td= human_datetime(stored_file.created_at)
          %td= User.find(stored_file.created_by).full_name
