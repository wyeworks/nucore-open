= content_for :h1 do
  = current_facility

= content_for :sidebar do
  = render "admin/shared/sidenav_product", sidenav_tab: @product.class.name.downcase.pluralize

= content_for :tabnav do
  = render "admin/shared/tabnav_product", secondary_tab: "accessories"

%h2= @product

%p= t("product_accessories.index.description")

- if can? :edit, ProductAccessory
  - if @available_accessories.count > 0
    = simple_form_for @product_accessory, url: facility_product_product_accessories_path(current_facility, @product, @product_accessory), defaults: { required: false } do |f|
      %ul.inline
        %li= f.association :accessory, collection: @available_accessories, include_blank: false, label: ProductAccessory.model_name.human
        %li= f.input :scaling_type, collection: ProductAccessory.scaling_types, label_method: ->(type) { t(type, scope: "product_accessories.type.") }, include_blank: false
        %li= f.submit t(".add"), class: ["btn", "btn-primary", "btn-inline"]

- if @product_accessories.any?
  %table.table.table-striped.table-hover
    %thead
      %tr
        %th.actions
        %th= ProductAccessory.model_name.human
        %th= ProductAccessory.human_attribute_name(:scaling_type)
    %tbody
      - @product_accessories.each do |pa|
        - accessory = pa.accessory
        %tr
          %td.centered= link_to text("shared.remove"), facility_product_product_accessory_path(current_facility, @product, pa), method: :delete if can? :delete, pa
          %td= link_to accessory.to_s_with_status, [:manage, current_facility, accessory]
          %td.centered= t(pa.scaling_type, scope: "product_accessories.type")
- else
  %p.notice= t(".no_accessories")
