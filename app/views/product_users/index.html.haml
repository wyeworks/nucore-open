= content_for :h1 do
  = current_facility

= content_for :sidebar do
  = render "admin/shared/sidenav_product",
    sidenav_tab: @product.class.name.pluralize.underscore

= content_for :tabnav do
  = render "admin/shared/tabnav_product", secondary_tab: "users"

%h2= @product
%h3= text("header")

%p= text("explanation", product_type: @product.model_name.human.downcase)

%p= link_to text("add"), [:new, current_facility, @product, :user], class: "btn-add"

.well.well-small
  = simple_form_for :product_user_import, url: facility_product_product_user_imports_path(current_facility, @product), html: { multipart: true } do |f|
    %h4= text("import_header")
    %p= text("import_hint")
    %label.btn.btn-primary
      = text("import_button")
      %span{ style:"display:none" }= f.file_field :file, onchange: "form.submit()"

- if @product_users.nil?
- elsif @product_users.empty?
  %p.notice= text("none")
- else
  = form_tag facility_instrument_users_path(format: :csv), method: :get, class: "search_form" do
    = hidden_field_tag :email, current_user.email, disabled: true
    = hidden_field_tag :format, params[:format], disabled: true

  = link_to t("reports.product_users.export"), url_for(format: :csv), class: "js--exportSearchResults pull-right", data: { form: ".search_form" }

  - if @product.has_product_access_groups?
    = form_for @product, url: [current_facility, @product, :update_restrictions], method: :put do |f|
      = render "table", f: f
      = f.submit text("update", plural_label: ProductAccessGroup.model_name.human.pluralize),
        class: ["btn", "btn-primary"]
  - else
    = render "table"

  = will_paginate(@product_users)
