- name: Make sure we have a 'ials' group
  group:
    name: ials
    state: present
  become: yes

- name: Make sure we have a 'corum' group
  group:
    name: corum
    state: present
  become: yes

- name: Make sure we have a 'umass' group
  group:
    name: umass
    state: present
  become: yes

- name: ials group should be able to password-less sudo
  copy:
    src: ials_sudoers
    dest: /etc/sudoers.d/ials
    owner: root
    group: root
    mode: "644"
  become: yes

- name: Create users
  user:
    name: "{{ item.name }}"
    state: "{{ item.state | default('present') }}"
    remove: "{{ item.remove | default('no') }}"
    groups: "{{ (item.groups) }}"
  with_items:
    - "{{ users }}"
  loop_control:
    label: "{{ item.name }}: groups {{ item.groups }}"
  become: yes

- name: Add group permission to users' home directory
  file:
    mode: "750"
    path: /home/{{ user.name }}
  with_items: "{{ users }}"
  loop_control:
    loop_var: user
  become: yes

# Fetch each ssh key, add comment for the user's name, and register as a 'fact'.
# Allows registering a single list of ssh keys with authorized_key using the exclusive option.
# Based on https://github.com/ansible/ansible/issues/11152
- name: Assemble keys
  set_fact:
    key_item: "{{ lookup('url', item.key_url, wantlist=True) | product([' ' + item.name]) | map('join') }}"
  loop: "{{ authorized_keys }}"
  register: keys

# Make a list of all keys and join them into a single string separated by newlines.
# Internally the ansible module will then split the string by newline and work at each one.
# This is the only way exclusive works with a list of keys.
# Based on https://github.com/ansible/ansible/issues/11152
- name: Add authorized keys for corum user
  authorized_key:
    user: corum
    key: "{{ keys.results | map(attribute='ansible_facts.key_item') | flatten(levels=1) | join('\n') }}"
    state: present
    exclusive: yes
  become: yes

- name: Add or remove authorized keys for root access users
  authorized_key:
    user: "{{ item.name }}"
    key: "{{ item.key_url }}"
    state: "{{ item.root_access }}"
  loop: "{{ authorized_keys }}"
  become: yes
