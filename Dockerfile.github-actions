# To build with specific versions of bundler or node, pass in a build arg.
# You can set these explicitly:
# `--build-arg NODE_VERSION=setup_18.x`
# Also, if the variable is already set in your local environment, you can just pass in:
# `--build-arg BUNDLER_VERSION`
# ... and `docker build` will pick up the local value.
#
# Example usage:
# build . -f Dockerfile.github-actions --build-arg NODE_VERSION=setup_18.x --build-arg BUNDLER_VERSION

FROM --platform=linux/amd64 ruby:3.1.1 as base

# Install NodeJS based on https://github.com/nodesource/distributions#installation-instructions
ARG NODE_VERSION=setup_16.x
ENV NODE_VERISON ${NODE_VERSION}
RUN apt-get update && \
 # Installs the node repository
 curl -sL https://deb.nodesource.com/$NODE_VERISON | bash && \
 # Installs libvips and the node repository
 apt-get install --yes libvips42 nodejs && \
 npm install --global yarn && \
 apt-get autoremove -y

ARG BUNDLER_VERSION=2.3.11
ENV BUNDLER_VERSION=${BUNDLER_VERSION}
RUN gem install bundler -v $BUNDLER_VERSION --no-document

# Install Google Chrome

# Set up the Chrome PPA
RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
RUN echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list

# Update the package list and install chrome
RUN apt-get update -y
RUN apt-get install -y google-chrome-stable

# Install chromedriver
RUN CHROMEDRIVER_VERSION=$(curl -s 'https://chromedriver.storage.googleapis.com/LATEST_RELEASE'); \
  wget https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip
RUN unzip chromedriver_linux64.zip
RUN rm -f chromedriver_linux64.zip
RUN mv chromedriver /usr/bin/chromedriver
RUN chown root:root /usr/bin/chromedriver
RUN chmod +x /usr/bin/chromedriver
